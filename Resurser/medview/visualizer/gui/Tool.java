/*
 * Tool.java
 *
 * Created on July 9, 2002, 11:41 AM
 *
 * $Id: Tool.java,v 1.2 2002/10/30 15:56:37 zachrisg Exp $
 *
 * $Log: Tool.java,v $
 * Revision 1.2  2002/10/30 15:56:37  zachrisg
 * Added Id and Log tags and updated javadoc.
 *
 */

package medview.visualizer.gui;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

/**
 * An abstract superclass for all tools.
 *
 * @author  Göran Zachrisson <zachrisg@mdstud.chalmers.se>
 */
public abstract class Tool implements MouseInputListener {

    /** The tool handler that handles the calls generated by the Tool. */
    protected ToolHandler toolHandler = null;
    
    /** The component that the Tool will observe for user actions. */
    protected JComponent component = null;
    
    /** 
     * Creates a new instance of Tool. 
     *
     * @param toolHandler The ToolHandler that handles the calls generated by the Tool.
     * @param component The JComponent that the Tool will observe for user actions.
     */
    protected Tool(ToolHandler toolHandler, JComponent component) {
        setToolHandler(toolHandler);
        setComponent(component);
    }

    /**
     * Gets the component that the tool observes for user actions.
     *
     * @return The observed component.
     */
    public JComponent getComponent() {
        return component;
    }
    
    /**
     * Gets the handler that handles the tool actions.
     *
     * @return The handler.
     */
    public ToolHandler getToolHandler() {
        return toolHandler;
    }

    
    /**
     * Invoked when the mouse button has been clicked (pressed and released) on a component. 
     * 
     * @param e The event object.
     */
    public void mouseClicked(MouseEvent e) {}

    /**    
     * Invoked when a mouse button has been pressed on a component. 
     *
     * @param e The event object.
     */
    public void mousePressed(MouseEvent e) {}

    /**
     * Invoked when a mouse button has been released on a component. 
     *
     * @param e The event object.
     */
    public void mouseReleased(MouseEvent e) {}

    /**
     * Invoked when the mouse enters a component. 
     *
     * @param e The event object.
     */
    public void mouseEntered(MouseEvent e) {}

    /**
     * Invoked when the mouse exits a component. 
     *
     * @param e The event object.
     */
    public void mouseExited(MouseEvent e) {}
    
    /**
     * Invoked when a mouse button is pressed on a component and then dragged. MOUSE_DRAGGED events will continue to be delivered to the component where the drag originated until the
     * mouse button is released (regardless of whether the mouse position is within the bounds of the component). 
     * 
     * Due to platform-dependent Drag&Drop implementations, MOUSE_DRAGGED events may not be delivered during a native Drag&Drop operation. 
     *
     * @param e The event object.
     */
    public void mouseDragged(MouseEvent e) {}

    /**
     * Invoked when the mouse button has been moved on a component (with no buttons down). 
     *
     * @param e The event object.
     */
    public void mouseMoved(MouseEvent e) {}

    /**
     * Sets the component that the tool should observe for user actions.
     *
     * @param component The new component to observe.
     */
    public void setComponent(JComponent component) {
        // remove the old mouselisteners
        if (this.component != null) {
            this.component.removeMouseListener(this);
            this.component.removeMouseMotionListener(this);
        }
        // set the new component
        this.component = component;
        if (component != null) {
            // add the new mouselisteners
            component.addMouseListener(this);
            component.addMouseMotionListener(this);
        }
    }
    
    /**
     * Sets the handler that handles the tool actions.
     *
     * @param toolHandler The new handler.
     */
    public void setToolHandler(ToolHandler toolHandler) {
        this.toolHandler = toolHandler;        
    } 
    
}
