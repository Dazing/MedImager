/*
 * TermChooser.java
 *
 * Created on August 22, 2002, 1:50 PM
 *
 * $Id: TermChooserPanel.java,v 1.10 2008/08/25 09:23:16 it2aran Exp $
 *
 * $Log: TermChooserPanel.java,v $
 * Revision 1.10  2008/08/25 09:23:16  it2aran
 * T4 Server updates so it loads the mvdlocation from the package
 * Visualizer: Chosen terms doesn't have to be sorted alpabetically
 * Visualizer: Can load and save chosen terms
 * Updated the release notes
 *
 * Revision 1.9  2008/08/22 08:20:49  it2aran
 * New feature: save and load terms that shoud be visible in grids etc.
 *
 * Revision 1.8  2005/05/20 08:20:08  erichson
 * No real changes, just re-generated
 *
 * Revision 1.7  2005/01/26 13:04:51  erichson
 * All views update to new termhandling methods
 *
 * Revision 1.6  2004/10/06 14:21:15  erichson
 * Updated since AlphabeticalHashSet now can be case insensitive.
 *
 * Revision 1.5  2002/11/26 13:49:12  erichson
 * Fixed bug 0002: Doubleclick in empty jlist would yield exception
 *
 * Revision 1.4  2002/10/14 10:35:46  erichson
 * Removed "choose terms" label
 *
 */

package medview.visualizer.gui;

import java.util.*;

import java.awt.event.*; // MouseLIstener
import javax.swing.*; // Jlist, panel etc

import misc.foundation.AlphabeticalHashSet;
import medview.visualizer.data.*;

/**
 * A component for choosing between active and non-active terms. Composed of two JLists where you can select multiple items, and move them from one
 * JList to the other by using buttons or double-clicking.
 *
 * @version 1.0
 * @author Nils Erichson <d97nix@dtek.chalmers.se>
 */
public class TermChooserPanel extends javax.swing.JPanel 
{

    /* Members */
    
    private TermContainer internalTermContainer;    
    
    
    /* Constructors */
    
    
    /*public TermChooserPanel(String[] chosenTerms)
    {
        AlphabeticalHashSet chosenTermsSet = new AlphabeticalHashSet(chosenTerms, false);
        
        AlphabeticalHashSet unchosenTermsSet = new AlphabeticalHashSet(DataManager.getInstance().getAllTerms(), false);
        unchosenTermsSet.removeAll(chosenTermsSet);
        
        this(chosenTermsSet, unchosenTermsSet);
    }*/
    
    
    /** Creates new form TermChooser
     * @param chosenTerms the initial set of chosen terms
     * @param unchosenTerms the initial set of unchosen terms.
     */
    public TermChooserPanel(String[] chosenTerms, String[] unchosenTerms) 
    {        
        this(
            new ArrayList(Arrays.asList(chosenTerms)),
            new AlphabeticalHashSet(unchosenTerms,
                                     false)); // Ordering not case sensitive        
    }
    
    public TermChooserPanel(Collection chosenTermsSet, Collection unchosenTermsSet)
    {
        internalTermContainer = new DefaultTermContainer(chosenTermsSet, unchosenTermsSet );
        
        initComponents();
        
        // set prototype width
        activeTermsList.setPrototypeCellValue("vas-krfsm");
        inactiveTermsList.setPrototypeCellValue("vas-krfsm");                        
        
        updateLists();
        // listeners
        
        TermChooserPanelMouseAdapter mouseAdapter = new TermChooserPanelMouseAdapter();
        activeTermsList.addMouseListener(mouseAdapter);
        inactiveTermsList.addMouseListener(mouseAdapter);
        
        
        
        // updateTerms();
    }
    
     /* Methods */
    
     /** Gets the set of chosen terms
     * @return the set of chosen terms
     */    
    public String[] getChosenTerms() 
    {
        
        return internalTermContainer.getChosenTerms();
    }
  
    
    /**
     * Update the JLists from the chosenTermsSet
     */
    private void updateLists() {
        // System.out.println("chooserpanel updating Terms"); // debug        
        
        activeTermsList.setListData(internalTermContainer.getChosenTerms());
        inactiveTermsList.setListData(internalTermContainer.getUnchosenTerms());                        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        centerPanel = new javax.swing.JPanel();
        leftListPanel = new javax.swing.JPanel();
        leftListScrollPane = new javax.swing.JScrollPane();
        activeTermsList = new javax.swing.JList();
        arrowButtonPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        rightListPanel = new javax.swing.JPanel();
        rightListScrollPane = new javax.swing.JScrollPane();
        inactiveTermsList = new javax.swing.JList();
        rightPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        centerPanel.setLayout(new java.awt.GridLayout(1, 0));

        leftListPanel.setLayout(new java.awt.BorderLayout());

        leftListPanel.setBorder(new javax.swing.border.TitledBorder("Active terms"));
        activeTermsList.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        leftListScrollPane.setViewportView(activeTermsList);

        leftListPanel.add(leftListScrollPane, java.awt.BorderLayout.CENTER);

        centerPanel.add(leftListPanel);

        leftButton.setText("<-");
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        jPanel1.add(leftButton);

        rightButton.setText("->");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });

        jPanel1.add(rightButton);

        arrowButtonPanel.add(jPanel1);

        centerPanel.add(arrowButtonPanel);

        rightListPanel.setLayout(new java.awt.BorderLayout());

        rightListPanel.setBorder(new javax.swing.border.TitledBorder("Inactive terms"));
        inactiveTermsList.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        inactiveTermsList.setMinimumSize(null);
        inactiveTermsList.setPreferredSize(null);
        rightListScrollPane.setViewportView(inactiveTermsList);

        rightListPanel.add(rightListScrollPane, java.awt.BorderLayout.CENTER);

        centerPanel.add(rightListPanel);

        add(centerPanel, java.awt.BorderLayout.CENTER);

        add(rightPanel, java.awt.BorderLayout.EAST);

        add(leftPanel, java.awt.BorderLayout.WEST);

    }//GEN-END:initComponents

    
    
    private class TermChooserPanelMouseAdapter extends MouseAdapter {
        JList list;
        // 1= left, 2=right
                
        public void mouseClicked(MouseEvent ev) {            
            Object source = ev.getSource();
            if (source instanceof JList ) {
                if (ev.getClickCount() == 2) { // double click
                    list = (JList) source;
                    int index = list.locationToIndex(ev.getPoint());
                    if (index >= 0) { // Skip it if we get index = -1
                        String[] termArray = new String[1];
                        termArray[0] = (String) list.getModel().getElementAt(index);
                        if (list == activeTermsList) { // remove
                            unchooseTerms(termArray);
                        } else if (list == inactiveTermsList) { // add
                            chooseTerms(termArray);
                        }
                    }
                }
            }
        }       
                
    }
    
    public void setChosenTerms(String[] terms)
    {
        internalTermContainer.setChosenTerms(terms);
        updateLists();
    }
    private void chooseTerms(String[] terms)
    {
        internalTermContainer.chooseTerms(terms);        
        updateLists();
    }
    
    
    private void unchooseTerms(String[] terms)
    {
        internalTermContainer.unchooseTerms(terms);        
        updateLists();
    }
    
    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        // Left: active, right: inactive. Right button -> move from active (left) to inactive (right)
        // Remove selcted (left) term from chosen
        Object[] terms = activeTermsList.getSelectedValues();
        
        if (terms != null) {
        
            String[] stringArray = new String[terms.length];
            for (int i = 0; i < terms. length; i++) {
                stringArray[i] = (String) terms[i];
            }

            unchooseTerms(stringArray);                                                
        }
        
    }//GEN-LAST:event_rightButtonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        // Left: active, right: inactive. Left button -> move from inactive (right) to active (left) = choose
        // Add selected (right) term to chosen
        Object[] terms = inactiveTermsList.getSelectedValues();
        if (terms != null) {                 
            
            String[] stringArray = new String[terms.length];
            for (int i = 0; i < terms. length; i++) {
                stringArray[i] = (String) terms[i];
            }                       
            
            chooseTerms(stringArray);
        }      
    }//GEN-LAST:event_leftButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList activeTermsList;
    private javax.swing.JPanel arrowButtonPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JList inactiveTermsList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton leftButton;
    private javax.swing.JPanel leftListPanel;
    private javax.swing.JScrollPane leftListScrollPane;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton rightButton;
    private javax.swing.JPanel rightListPanel;
    private javax.swing.JScrollPane rightListScrollPane;
    private javax.swing.JPanel rightPanel;
    // End of variables declaration//GEN-END:variables
    
}
