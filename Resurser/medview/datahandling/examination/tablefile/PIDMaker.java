/*
 * PIDMaker.java
 *
 * Created on den 29 juli 2004, 15:12
 *
 * $Log: PIDMaker.java,v $
 * Revision 1.4  2005/02/17 10:22:05  lindahlf
 * <No Comment Entered>
 *
 * Revision 1.3  2004/10/11 13:58:51  erichson
 * no longer forces personnummer
 *
 * Revision 1.2  2004/10/05 08:45:05  erichson
 * Personnummer conversion. (10 or 12 digits)
 *
 * Revision 1.1  2004/09/09 10:47:30  erichson
 * First check-in.
 *
 * 
 * $Id: PIDMaker.java,v 1.4 2005/02/17 10:22:05 lindahlf Exp $
 */

package medview.datahandling.examination.tablefile;

import java.util.*;

import medview.datahandling.*;
import medview.datahandling.examination.*;

/**
 * Support class for MHCTableFileExaminationDataHandler. 
 * Handles p-code generation via MVDhandler by default, or a custom pcodegenerator.
 *
 * @author Nils Erichson <d97nix@dtek.chalmers.se>
 */
public class PIDMaker {
    
    private static final MedViewDataHandler MVDH = MedViewDataHandler.instance();            
    
    // Visualizer will set this to force it's own pcodeGenerator. Otherwise MVDH is used.
    private PCodeGenerator pcodeGenerator;
    
    /**
     * HashMap which maps pidStrings to PCodes. Used by makePid to cache Pcodes
     * (So that every pidString only gets 
     */
    private HashMap pidStringToPcodeMap;
    
    /** Creates a new instance of PIDMaker */
    public PIDMaker() {
        pidStringToPcodeMap = new HashMap();
        pcodeGenerator = null;
    }
    
    public PIDMaker(PCodeGenerator generator)
    {
        this();
        pcodeGenerator = generator;
    }
    
    
    /**
     * Create PatientIdentifier from a patient-id string (personnummer)
     * @param pidString a pid string (personnummer)
     * @return a PatientIdentifier. Pcode is generated by MedViewDataHandler by default,
     * unless the user has used setPCodeGenerator() to set another PCodeGenerator.
     */
    public PatientIdentifier makePID(String pidString) 
        throws 
               InvalidPIDException,
               medview.datahandling.CouldNotGeneratePCodeException
    {
        // Check if the pCode is already cached               
        String pCode = (String) pidStringToPcodeMap.get(pidString);
        
        if (pCode == null) // Perform the generation
        {   
            
            // Add first two letters if the PID is less than 12 characters
            
            // pidString = makeLongPersonnummer(pidString);
            
            try 
            {
                if (pcodeGenerator != null) // Use own pcodeGenerator instead of MVDH
                {
                    pCode = pcodeGenerator.obtainPCode(pidString, true); // Always consume since we are making a new one                    
                } else { // Use MVDH 

                    pidString = MVDH.normalizePID(pidString);

                    if (MVDH.validates(pidString))
                    {                                
                        if (MVDH.isPCode(pidString))
                        {
                            PatientIdentifier pid = new PatientIdentifier(pidString); // It's a pcode
                            return pid;
                        } else
                        {                                                                        
                            pCode = MVDH.obtainPCode(pidString); // Use MedViewDataHandler to generate pcode
                        }                
                    } else { // PID not validated
                        //throw new IOException("getPatients received a PID that was not valid: [" + pidString + "]: ");
                        throw new InvalidPIDException("getPatients received a PID that was not valid: [" + pidString + "]: ");
                    }            
                } // end use MVDH
            } catch (InvalidRawPIDException irpide)
            {
                throw new InvalidPIDException("makePid: InvalidRawPIDException caused by pid " + pidString);
            }
            
            // Store the generated pCode so that we don't have to generate it again later
            pidStringToPcodeMap.put(pidString, pCode);
            
        } // end of generation - we now have pCode either from cache or generated
        
        PatientIdentifier pid = new PatientIdentifier(pCode, pidString); // Use the pid, but also generated p-code            
        return pid;
       
    } // end makePID
    
    /**
     * Visualizer will set this to force it's own pcodeGenerator. Otherwise MVDH is used.
     */
    public void setPCodeGenerator(PCodeGenerator generator) {
        pcodeGenerator = generator;
    }
    
    public static String makeLongPersonnummer(String pidString) 
        throws InvalidPIDException
    {
        
        if (pidString.length() <= 11) {
            String yearString;
            try {
                yearString = pidString.substring(0,2);
            } catch (StringIndexOutOfBoundsException sioobe)
            {
                throw new InvalidPIDException(
                   "makeLongPersonnummer: Personnummer [" + pidString + "] invalid: StringOutOfBoundsException: " + sioobe.getMessage()
                );
            }
            try 
            {
                int cutoffYear = new GregorianCalendar().get(Calendar.YEAR) - 100; // Returns years since 1900
                int year = Integer.parseInt(yearString) + 1900;
                if (year < cutoffYear) // For example, in 2004 cutoff is 1904
                    pidString = "20" + pidString;
                else                     
                    pidString = "19" + pidString;
            }
            catch (NumberFormatException nfe) { // Failed to parse
                throw new InvalidPIDException("First two characters of pid " + pidString + " are not numbers!");
            }
        }
        return pidString;
    }
    
    
    
}
