/*
 *
 *
 * Created on August 4, 2001, 8:40 PM
 *
 * $Id: FormEditor.java,v 1.5 2004/11/04 12:04:39 lindahlf Exp $
 *
 */
package medview.formeditor.components;

import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.*;

import javax.swing.border.*;
import javax.swing.event.*;

import medview.formeditor.AppController;
import medview.formeditor.data.*;
import medview.formeditor.tools.*;

import medview.formeditor.models.*;
import medview.formeditor.components.*;
import medview.formeditor.interfaces.*;

import javax.swing.UIManager;

/**
 *
 * @author  nils
 * @version
 */
public class FormEditor extends javax.swing.JFrame {
    
    private ExaminationModel    mExaminationModel;
    private ValueTabbedPane     mValueTabbedPane;
    private File                mCurrentFile;
    private boolean             mValueChanged;
    
    private DatahandlingHandler mDH                 = DatahandlingHandler.getInstance();
    private String              mNewTitile          = mDH.getLanguageString(mDH.TITLE_FORMEDITOR_UNTITLED_LS_PROPERTY);
    private static final int    StandardFieldLength = 44;
    
    /** Creates new form FormEditor */
    public FormEditor() {
        initComponents();
        setJMenuBar(designMenuBar);  // 2002-04-12 Nils
        
        mExaminationModel = new ExaminationModel();
        
        mValueTabbedPane = new ValueTabbedPane(true);
        mValueTabbedPane.setModel(mExaminationModel);
        
        this.getContentPane().add(mValueTabbedPane);
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int aH = screenSize.height - 80;
        int aW = screenSize.width  - 60;
        
        setSize(aW,aH);
        setLocation((screenSize.width - aW) / 2, (screenSize.height - aH) / 4);
        
        mValueChanged = false;
        setIconImage(Toolkit.getDefaultToolkit().createImage(
        this.getClass().getResource("/medview/formeditor/components/Icons/frameIcon.png")));
        mExaminationModel.setFormEditor(this);
        setTitle(mNewTitile);
        
    }
    public void valueChanged(){
        //Ut.prt("FormEditpr valueCahged");
        mValueChanged  = true;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        designMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFormItem = new javax.swing.JMenuItem();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        fileMenuSeparator1 = new javax.swing.JSeparator();
        preferencesItem = new javax.swing.JMenuItem();
        fileMenuSeparator2 = new javax.swing.JSeparator();
        exitItem = new javax.swing.JMenuItem();
        tabMenu = new javax.swing.JMenu();
        newTabItem = new javax.swing.JMenuItem();
        delTabItem = new javax.swing.JMenuItem();
        tabMenuSeparator1 = new javax.swing.JSeparator();
        tabUpItem = new javax.swing.JMenuItem();
        tabDownItem = new javax.swing.JMenuItem();
        inputMenu = new javax.swing.JMenu();
        newInputItem = new javax.swing.JMenuItem();
        delInputItem = new javax.swing.JMenuItem();
        inputMenuSeparator1 = new javax.swing.JSeparator();
        inputUpItem = new javax.swing.JMenuItem();
        inputDownItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        mBtNew = new javax.swing.JButton();
        mBtSave = new javax.swing.JButton();
        mBtOpen = new javax.swing.JButton();
        mBtNewFlik = new javax.swing.JButton();
        mBtNewFalt = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        fileMenu.setText(mDH.getLanguageString(mDH.MENU_ARCHIVE_LS_PROPERTY));
        fileMenu.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ARCHIVE_LS_PROPERTY).charAt(0));
        newFormItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newFormItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_NEW_FORM_LS_PROPERTY));
        newFormItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_NEW_PROTOCOL_LS_PROPERTY).charAt(0));
        newFormItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFormItemActionPerformed(evt);
            }
        });

        fileMenu.add(newFormItem);
        openItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        openItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_OPEN_LS_PROPERTY));
        openItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_OPEN_LS_PROPERTY).charAt(0));
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });

        fileMenu.add(openItem);
        saveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        saveItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_SAVE_LS_PROPERTY));
        saveItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_SAVE_LS_PROPERTY).charAt(0));
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveItem);
        saveAsItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_SAVE_AS_LS_PROPERTY));
        saveAsItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_SAVE_AS_LS_PROPERTY).charAt(0));
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsItem);
        fileMenu.add(fileMenuSeparator1);
        preferencesItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_PREFERENCES_LS_PROPERTY));
        preferencesItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_PREFERENCES_LS_PROPERTY).charAt(0));
        preferencesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionMenuPerform(evt);
            }
        });
        fileMenu.add(preferencesItem);

        exitItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FILE_EXIT_LS_PROPERTY));
        exitItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_EXIT_LS_PROPERTY).charAt(0));
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        
        fileMenu.add(fileMenuSeparator2);

        fileMenu.add(exitItem);
        designMenuBar.add(fileMenu);
        // tabMenu.setMnemonic(KeyEvent.VK_F); ???????????????????????????
        tabMenu.setText(mDH.getLanguageString(mDH.MENU_TABS_LS_PROPERTY));
        tabMenu.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_TABS_LS_PROPERTY).charAt(0));
        newTabItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newTabItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_TAB_NEW_LS_PROPERTY));
        newTabItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_NEW_TAB_LS_PROPERTY).charAt(0));
        newTabItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTabItemActionPerformed(evt);
            }
        });

        tabMenu.add(newTabItem);
        delTabItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_TAB_REMOVE_LS_PROPERTY));
        delTabItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_REMOVE_TAB_LS_PROPERTY).charAt(0));
        delTabItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delTabItemActionPerformed(evt);
            }
        });

        tabMenu.add(delTabItem);
        tabMenu.add(tabMenuSeparator1);
        tabUpItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_TAB_UP_LS_PROPERTY));
        tabUpItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_UPWARDS_LS_PROPERTY).charAt(0));
        tabUpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabUpItemActionPerformed(evt);
            }
        });

        tabMenu.add(tabUpItem);
        tabDownItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_TAB_DOWN_LS_PROPERTY));
        tabDownItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_DOWNWARDS_LS_PROPERTY).charAt(0));
        tabDownItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tabDownItemActionPerformed(evt);
            }
        });

        tabMenu.add(tabDownItem);
        designMenuBar.add(tabMenu);
        inputMenu.setText(mDH.getLanguageString(mDH.MENU_FIELD_LS_PROPERTY));
        inputMenu.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_FIELD_LS_PROPERTY).charAt(0));
        newInputItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newInputItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FIELD_NEW_LS_PROPERTY));
        newInputItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_NEW_FIELD_LS_PROPERTY).charAt(0));
        newInputItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newInputItemActionPerformed(evt);
            }
        });

        inputMenu.add(newInputItem);
        delInputItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FIELD_REMOVE_LS_PROPERTY));
        delInputItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_REMOVE_FIELD_LS_PROPERTY).charAt(0));
        delInputItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delInputItemActionPerformed(evt);
            }
        });

        inputMenu.add(delInputItem);
        inputMenu.add(inputMenuSeparator1);
        inputUpItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FIELD_UP_LS_PROPERTY));
        inputUpItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_UPWARDS_LS_PROPERTY).charAt(0));
        inputUpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputUpItemActionPerformed(evt);
            }
        });

        inputMenu.add(inputUpItem);
        inputDownItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_FIELD_DOWN_LS_PROPERTY));
        inputDownItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_DOWNWARDS_LS_PROPERTY).charAt(0));
        inputDownItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDownItemActionPerformed(evt);
            }
        });

        inputMenu.add(inputDownItem);
        designMenuBar.add(inputMenu);
        
        aboutMenu.setText(mDH.getLanguageString(mDH.MENU_HELP_LS_PROPERTY));
        aboutMenu.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_HELP_LS_PROPERTY).charAt(0));

        //aboutMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        aboutMenuItem.setText(mDH.getLanguageString(mDH.MENU_ITEM_HELP_ABOUT_FORMEDITOR_LS_PROPERTY));
        aboutMenuItem.setMnemonic(mDH.getLanguageString(mDH.MNEMONIC_MENU_ITEM_ABOUT_LS_PROPERTY).charAt(0));
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAboutWin(evt);
            }
        });

        aboutMenu.add(aboutMenuItem);
        designMenuBar.add(aboutMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jToolBar1.setRollover(true);
        mBtNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medview/formeditor/components/Icons/newIcon.gif")));
        mBtNew.setToolTipText(mDH.getLanguageString(mDH.TOOLTIP_NEW_FORM_LS_PROPERTY));
        mBtNew.setMaximumSize(new java.awt.Dimension(24, 24));
        mBtNew.setMinimumSize(new java.awt.Dimension(24, 24));
        mBtNew.setPreferredSize(new java.awt.Dimension(24, 24));
        mBtNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtNewActionPerformed(evt);
            }
        });

        jToolBar1.add(mBtNew);

        mBtOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medview/formeditor/components/Icons/loadIcon.gif")));
        mBtOpen.setToolTipText((mDH.getLanguageString(mDH.TOOLTIP_OPEN_FORM_LS_PROPERTY)));
        mBtOpen.setMaximumSize(new java.awt.Dimension(24, 24));
        mBtOpen.setMinimumSize(new java.awt.Dimension(24, 24));
        mBtOpen.setPreferredSize(new java.awt.Dimension(24, 24));
        mBtOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtOpenActionPerformed(evt);
            }
        });
                               
        jToolBar1.add(mBtOpen);

        mBtSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medview/formeditor/components/Icons/saveIcon.gif")));
        mBtSave.setToolTipText(mDH.getLanguageString(mDH.TOOLTIP_SAVE_FORM_LS_PROPERTY));
        mBtSave.setMaximumSize(new java.awt.Dimension(24, 24));
        mBtSave.setMinimumSize(new java.awt.Dimension(24, 24));
        mBtSave.setPreferredSize(new java.awt.Dimension(24, 24));
        mBtSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtSaveActionPerformed(evt);
            }
        });                               

        jToolBar1.add(mBtSave);


        mBtNewFlik.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medview/formeditor/components/Icons/newFlit.gif")));
        mBtNewFlik.setToolTipText((mDH.getLanguageString(mDH.TOOLTIP_NEW_TAB_LS_PROPERTY)));
        mBtNewFlik.setMaximumSize(new java.awt.Dimension(24, 24));
        mBtNewFlik.setMinimumSize(new java.awt.Dimension(24, 24));
        mBtNewFlik.setPreferredSize(new java.awt.Dimension(24, 24));
        mBtNewFlik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtNewFlikActionPerformed(evt);
            }
        });

        // Some spece before next button
        jToolBar1.add(Box.createRigidArea(new Dimension(11, 11)));
        jToolBar1.add(mBtNewFlik);

        mBtNewFalt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/medview/formeditor/components/Icons/newFalt.gif")));
        mBtNewFalt.setToolTipText((mDH.getLanguageString(mDH.TOOLTIP_NEW_FIELD_LS_PROPERTY)));
        mBtNewFalt.setMaximumSize(new java.awt.Dimension(24, 24));
        mBtNewFalt.setMinimumSize(new java.awt.Dimension(24, 24));
        mBtNewFalt.setPreferredSize(new java.awt.Dimension(24, 24));
        mBtNewFalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtNewFaltActionPerformed(evt);
            }
        });

        jToolBar1.add(mBtNewFalt);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.add(jSeparator2);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents
    
    private void mBtNewFaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtNewFaltActionPerformed
        // Add your handling code here:
        newInputItemActionPerformed(null);
    }//GEN-LAST:event_mBtNewFaltActionPerformed
    
    private void mBtNewFlikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtNewFlikActionPerformed
        // Add your handling code here:
        newTabItemActionPerformed(null);
    }//GEN-LAST:event_mBtNewFlikActionPerformed
    
    private void mBtOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtOpenActionPerformed
        // Add your handling code here:
        openItemActionPerformed(null);
    }//GEN-LAST:event_mBtOpenActionPerformed
    
    private void mBtNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtNewActionPerformed
        // Add your handling code here:
        newFormItemActionPerformed(null);
    }//GEN-LAST:event_mBtNewActionPerformed
    
    private void mBtSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtSaveActionPerformed
        // Add your handling code here:
        saveItemActionPerformed(null);
    }//GEN-LAST:event_mBtSaveActionPerformed
    
    private void optionMenuPerform(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionMenuPerform
        // Add your handling code here:
        AppController.instance().showPreferences(this);
    }//GEN-LAST:event_optionMenuPerform
        
    private void showAboutWin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAboutWin
        AppController.instance().showAboutPanel(this);
    }//GEN-LAST:event_showAboutWin
        
  private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
      quitApplication();
      
      
      // Add your handling code here:
  }//GEN-LAST:event_exitItemActionPerformed
  
  private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
      // Add your handling code here:
      try {
          if (mCurrentFile != null)  //nader 18/4
              saveTemplate(mCurrentFile);
          else
              saveAsItemActionPerformed(evt);
      } catch (IOException e) {
          JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.ERROR_WRITE_PROTOCOL_LS_PROPERTY) + " " + mCurrentFile.getPath() +".",
          mDH.getLanguageString(mDH.OTHER_SAVE_LS_PROPERTY),JOptionPane.ERROR_MESSAGE);
      }
  }//GEN-LAST:event_saveItemActionPerformed
  
  private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
      // First check that we have saved ok
      boolean savedOK = checkSaved_returnSavedOK();
      
      if (savedOK) {
          String templateDir = Config.getTemplatePath();
          JFileChooser chooser = new JFileChooser(templateDir);
          String[] extensions = { "xml","XML","Xml"};
          misc.gui.ExtensionFileFilter filter = new misc.gui.ExtensionFileFilter(extensions, true);
          filter.setDescription(mDH.getLanguageString(mDH.FILEFILTER_XML_FILES_LS_PROPERTY));
          filter.setIncludeDirectories(true);
          chooser.setFileFilter(filter);
          
          int result = chooser.showOpenDialog(this);
          
          if (result == JFileChooser.APPROVE_OPTION) {
              File chosenFile = chooser.getSelectedFile();
              Config.setTemplatePath(chosenFile.getPath());
              try {
                  if (chosenFile.canRead()) {
                      
                      // Get examination handler, use it to read examination mExaminationModel
                      XMLFileHandler handler = new XMLFileHandler();
                      //ExaminationModel newModel = handler.readXMLExamination(chosenFile);
                      mExaminationModel = handler.readXMLExamination(chosenFile);
                      mValueTabbedPane.setModel(mExaminationModel);
                      mValueChanged = false;
                      mCurrentFile = chosenFile;
                      mExaminationModel.setFormEditor(this);
                      setTitle("FormEditor - " + chosenFile.toString());
                  } else {
                      JOptionPane.showMessageDialog(this,"Error: File " + chosenFile.getPath() + "is not readable!","Not readable",JOptionPane.ERROR_MESSAGE);
                  }
              } catch (IOException e) {
                  JOptionPane.showMessageDialog(this,"Error: Could not read file " + chosenFile.getName() + "!","Read error",JOptionPane.ERROR_MESSAGE);
                  e.printStackTrace();
              }
          }
      }
      
  }//GEN-LAST:event_openItemActionPerformed
  
  private void setExaminationModel(ExaminationModel in_model) {  // not used
      
      mExaminationModel = in_model;
      mExaminationModel.setFormEditor(this);
      mValueTabbedPane.setModel(mExaminationModel);
  }
  
  /**
   * Checks if the current file is saved, asks if we want to save or not
   * @return true if saved or "Don't save", false if cancel
   */
  private boolean checkSaved_returnSavedOK() {
      
      boolean savedOK = false;
      
      if (mValueChanged) {
          int result = JOptionPane.showConfirmDialog(this,mDH.getLanguageString(mDH.LABEL_SHOULD_SAVE_PROTOCOL_LS_PROPERTY),
          mDH.getLanguageString(mDH.TITLE_CLOSE_PROTOCOL_LS_PROPERTY),
          JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
          switch(result) {
              case JOptionPane.YES_OPTION:
                  saveItemActionPerformed(null);
                  savedOK = true;
                  break;
              case JOptionPane.NO_OPTION:
                  savedOK = true;
                  break;
              case JOptionPane.CANCEL_OPTION:
                  //default:
                  savedOK = false;
                  break;
          }
          
      }
      else {
          // saved is true
          savedOK = true;
      }
      return savedOK;
  }
  
  private void newFormItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFormItemActionPerformed
      
      // Check if saved
      boolean savedOK = checkSaved_returnSavedOK();
      
      if (savedOK) {
          mExaminationModel = new ExaminationModel();
          mExaminationModel.setFormEditor(this);
          mValueTabbedPane.setModel(mExaminationModel);
          mValueChanged = false;
          mCurrentFile = null;
          setTitle(mNewTitile);
      }
  }//GEN-LAST:event_newFormItemActionPerformed
  
  private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
      // Add your handling code here:
      // Open JFileChooser to select xml file
      String templateDir = Config.getTemplatePath();
      JFileChooser chooser = new JFileChooser(templateDir);
      String[] extensions = { "xml","XML","Xml"};
      chooser.setApproveButtonText(mDH.getLanguageString(mDH.BUTTON_SAVE_LS_PROPERTY));
      
      misc.gui.ExtensionFileFilter filter = new misc.gui.ExtensionFileFilter(extensions, true);
      filter.setDescription(mDH.getLanguageString(mDH.FILEFILTER_XML_FILES_LS_PROPERTY));
      filter.setIncludeDirectories(true);
      
      chooser.setFileFilter(filter);
      // int result = chooser.showOpenDialog(this);
      int result = chooser.showSaveDialog(this);
      if (result == JFileChooser.APPROVE_OPTION) {
          File chosenFile = chooser.getSelectedFile();
          Config.setTemplatePath(chosenFile.getPath());

          // Check that chosenFile ends in .xml. If not, add it
          if (! chosenFile.getPath().toLowerCase().endsWith(".xml")) {
              chosenFile = new File(chosenFile.getPath() + ".xml");
          }
          try {
              if (! chosenFile.exists()) {
                  chosenFile.createNewFile();
              }
              
              if (chosenFile.canWrite()) {
                  saveTemplate(chosenFile);
                  mCurrentFile = chosenFile;
                  setTitle("FormEditor - " + mCurrentFile.toString());
              }
              else {
                  JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.ERROR_WRITE_PROTOCOL_PERMISSION_LS_PROPERTY) +" " + chosenFile.getPath() + ".",
                  mDH.getLanguageString(mDH.OTHER_SAVE_LS_PROPERTY),JOptionPane.ERROR_MESSAGE);
              }
          }
          catch (IOException e) {
              JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.ERROR_WRITE_PROTOCOL_LS_PROPERTY) + " " + chosenFile.getName() + ".",
              mDH.getLanguageString(mDH.OTHER_SAVE_LS_PROPERTY),JOptionPane.ERROR_MESSAGE);
              e.printStackTrace();
              return;
          }
          
      }
  }//GEN-LAST:event_saveAsItemActionPerformed
  
  private void saveTemplate(File targetFile) throws IOException {
      XMLFileHandler xmlFH = new XMLFileHandler();
      xmlFH.saveExamination(targetFile,mExaminationModel);
      mValueChanged = false;
      //DatahandlingHandler.getInstance().writeTerms(mExaminationModel);
  }
  
  private void moveSelectedInput(int relativeMovement) {
      
      TabPanel activeTab = (TabPanel) mValueTabbedPane.getSelectedComponent();
      
      if (activeTab != null) {
          // Get name of this tab (= category)
          
          String catName = activeTab.getName();
          CategoryModel catModel = mExaminationModel.getCategory(catName);
          
          // selected input
          ValueInputComponent inputC = activeTab.getSelectedInputComponent();
          
          if (inputC != null) {
              String inputName = inputC.getInputModel().getName();
              
              catModel.moveInput(inputName,relativeMovement);
              
          }
      }
  }
  
  private void inputDownItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDownItemActionPerformed
      moveSelectedInput(+1);
      
      
      
  }//GEN-LAST:event_inputDownItemActionPerformed
  
  private void inputUpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputUpItemActionPerformed
      moveSelectedInput(-1);
  }//GEN-LAST:event_inputUpItemActionPerformed
  
  
  private  void moveCurrentCategory(int relativeMovement) {
      // Get selected tab
      TabPanel activeTab = (TabPanel) mValueTabbedPane.getSelectedComponent();
      
      // Get name of this tab
      String catName = activeTab.getName();
      
      // Get this category index
      //mExaminationModel.categoryDown(
      mExaminationModel.moveCategory( mExaminationModel.getCategory(catName),relativeMovement);
      
  }
  
  
  private void tabDownItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabDownItemActionPerformed
      
      moveCurrentCategory(+1);
      
      
  }//GEN-LAST:event_tabDownItemActionPerformed
  
  
  private void tabUpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tabUpItemActionPerformed
      
      moveCurrentCategory(-1);
      
      
      
  }//GEN-LAST:event_tabUpItemActionPerformed
  
  private void delInputItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delInputItemActionPerformed
      // Add your handling code here:
      CategoryModel catModel = getSelectedCategoryModel();
      if (catModel == null) {
          //Ut.error("Ingen flik \u00E4r vald!, Flik saknas");
          JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.LABEL_NO_FIELD_SELECTED_LS_PROPERTY),
          mDH.getLanguageString(mDH.TITLE_NO_TAB_SELECTED_LS_PROPERTY),
          JOptionPane.ERROR_MESSAGE);
      }
      else {
          ValueInputComponent vic = mValueTabbedPane.getSelectedInputComponent();
          if (vic == null) {
              //Ut.error("Inget f\u00E4lt \u00E4r valt!', F\u00E4lt saknas");
              JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.LABEL_NO_FIELD_SELECTED_LS_PROPERTY),
              mDH.getLanguageString(mDH.TITLE_NO_FIELD_SELECTED_LS_PROPERTY),
              JOptionPane.ERROR_MESSAGE);
          }
          else {
              int ans = Ut.yesNoQuestion(mDH.getLanguageString(mDH.QUESTION_SHOULD_REMOVE_FIELD_LS_PROPERTY) + " \"" + vic.getInputModel().getName() + "\"?");
              if(ans == Ut.Yes){
                  catModel.removeInput(vic.getInputModel());
                  mValueChanged = true;
              }
          }
      }
      
  }//GEN-LAST:event_delInputItemActionPerformed
  
  private CategoryModel getSelectedCategoryModel() {
      TabPanel activeTab = mValueTabbedPane.getSelectedTab();
      if (activeTab == null) {
          JOptionPane.showMessageDialog(this,mDH.getLanguageString(mDH.LABEL_NO_TAB_SELECTED_LS_PROPERTY),
          mDH.getLanguageString(mDH.TITLE_NO_TAB_SELECTED_LS_PROPERTY),
          JOptionPane.ERROR_MESSAGE);
          return null;
      } else {
          // get the category mExaminationModel for the active tab
          CategoryModel catModel = activeTab.getModel();
          return catModel;
      }
  }
  
  private void newInputItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newInputItemActionPerformed
      
      CategoryModel catModel = getSelectedCategoryModel();
      if (catModel != null) {
          // Show dialog for name of new query
          String name = JOptionPane.showInputDialog(this,mDH.getLanguageString(mDH.LABEL_NEW_FIELD_NAME_LS_PROPERTY),
          mDH.getLanguageString(mDH.TITLE_NEW_FIELD_DIALOG_LS_PROPERTY),JOptionPane.QUESTION_MESSAGE);
          if(name == null || name.length() < 1) return;
          if (catModel.containsInput(name)) {
              JOptionPane.showMessageDialog(this, "\"" +name + "\" " + mDH.getLanguageString(mDH.ERROR_FIELD_ALREADY_EXISTS),
              mDH.getLanguageString(mDH.ERROR_FIELD_INVALID_NAME),JOptionPane.INFORMATION_MESSAGE);
          } else {
              // Create new field with this name, add it to the category
              //FieldModel fm = new FieldModel(name, FieldModel.TYPE_SINGLE,new PresetModel(name),"Description","",medview.data.MRConst.FIELD_LENGTH);
              CreatorFieldModel fm = new CreatorFieldModel(name, FieldModel.TYPE_SINGLE,new PresetModel(name),"","",StandardFieldLength);
              catModel.addInput(fm);
              mValueChanged = true;
          }
      }
  }//GEN-LAST:event_newInputItemActionPerformed
  
  private void delTabItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delTabItemActionPerformed
      // Add your handling code here:
      // Get active tab
      CategoryModel catModel = getSelectedCategoryModel();
      
      if (catModel != null) {
          // remove the mExaminationModel from the hashtable
          String question = mDH.getLanguageString(mDH.QUESTION_SHOULD_REMOVE_TAB_LS_PROPERTY);
          int ans = Ut.yesNoQuestion(question + " \"" + catModel.getTitle() + "\"?");
          if(ans == Ut.Yes){            
              mExaminationModel.removeCategory(catModel);
              mValueChanged = true;
          }
      }
  }//GEN-LAST:event_delTabItemActionPerformed
      
  private void newTabItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTabItemActionPerformed
      // Show dialog for name of new tab
      String name = JOptionPane.showInputDialog(this,mDH.getLanguageString(mDH.LABEL_NEW_TAB_NAME_LS_PROPERTY),
      mDH.getLanguageString(mDH.TITLE_NEW_TAB_DIALOG_LS_PROPERTY),JOptionPane.QUESTION_MESSAGE);
      
      if(name == null || name.length() < 1) return;
      
      if (mExaminationModel.containsCategory(name)) {
          JOptionPane.showMessageDialog(this, "\"" + name + "\" " + mDH.getLanguageString(mDH.ERROR_TAB_ALREADY_EXISTS),
          mDH.getLanguageString(mDH.ERROR_TAB_INVALID_NAME),JOptionPane.INFORMATION_MESSAGE);
      }
      else {
          // Name ok, create category
          System.out.println("newTabItemActionPerformed: creating new CategoryModel: " + name);
          CategoryModel catModel = new CategoryModel(name);
          mExaminationModel.addCategory(catModel);
          
          int lastIdx = mValueTabbedPane.getTabCount() - 1;
          if(lastIdx >= 0)
              mValueTabbedPane.setSelectedIndex(lastIdx);
          mValueChanged = true;
          // rebuild valuetabbedpane
          
          mValueTabbedPane.addTab(name,new TabPanel(catModel,mValueTabbedPane));
      }
      // Add your handling code here:
  }//GEN-LAST:event_newTabItemActionPerformed
  
  /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        quitApplication();
    }//GEN-LAST:event_exitForm
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem inputDownItem;
    private javax.swing.JMenuItem newInputItem;
    private javax.swing.JMenuItem delTabItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JButton mBtSave;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem inputUpItem;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem newFormItem;
    private javax.swing.JMenuItem delInputItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JButton mBtNewFalt;
    private javax.swing.JSeparator tabMenuSeparator1;
    private javax.swing.JMenuBar designMenuBar;
    private javax.swing.JSeparator inputMenuSeparator1;
    private javax.swing.JMenu tabMenu;
    private javax.swing.JMenuItem preferencesItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem tabDownItem;
    private javax.swing.JButton mBtNewFlik;
    private javax.swing.JButton mBtOpen;
    private javax.swing.JMenu inputMenu;
    private javax.swing.JMenuItem newTabItem;
    private javax.swing.JSeparator fileMenuSeparator2;
    private javax.swing.JSeparator fileMenuSeparator1;
    private javax.swing.JMenuItem tabUpItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JButton mBtNew;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
    private  void quitApplication() {
        if (checkSaved_returnSavedOK()){
            //dispose();
            System.exit(0);
        }
    }
    
  }
