package com.MedImager.ExaminationServer;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import java.sql.*;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.UriInfo;

import org.apache.tomcat.util.http.fileupload.FileUtils;

import medview.datahandling.examination.ExaminationIdentifier;
import medview.datahandling.examination.MVDHandler;
import medview.datahandling.examination.NoSuchExaminationException;
import medview.datahandling.examination.filter.ExaminationContentFilter;
import misc.foundation.DefaultProgressNotifiable;
import misc.foundation.MethodNotSupportedException;

/**
 * Root resource (exposed at "myresource" path)
 */
@Path("")
public class MyResource {
	
	@Secured
	@GET
	@Path("/search")
    @Produces(MediaType.APPLICATION_JSON)
    public List <Examination> search2(@Context UriInfo uriInfo) throws MethodNotSupportedException{
		SearchTermParser stp = new SearchTermParser(new SearchFilter(uriInfo));
		return stp.getResultListWithFilter2();
    }
	@Secured
	@GET
	@Path("/patient/{examinationID}")
    @Produces(MediaType.APPLICATION_JSON)
	public List<Examination> getPatientJSON(@PathParam("examinationID") String examinationID) throws MethodNotSupportedException, IOException{
		ExaminationIDParser eidParser = new ExaminationIDParser();
		return eidParser.getMoreFromPatient(examinationID);
	}
	@Secured
	@GET
	@Path("/examination/{examinationID}")
    @Produces(MediaType.APPLICATION_JSON)
	public Examination getExaminationJSON(@PathParam("examinationID") String examinationID) throws MethodNotSupportedException, IOException{
		ExaminationIDParser eidParser = new ExaminationIDParser();
		return eidParser.getMoreFromExamination(examinationID);
	}

	@GET
	@Path("/image/{examinationID}/{index}")
	@Produces("image/jpg")
	public Response getFile(@PathParam("examinationID") String examinationID, @PathParam("index") int index) throws IOException {
		ExaminationIDParser eidParser = new ExaminationIDParser();
		String path = eidParser.getMoreFromExamination(examinationID).getImagePaths().get(index);
		File file = new File(path);
		ResponseBuilder response = Response.ok((Object) file);
		response.header("Content-Disposition",
			"attachment; filename=" + examinationID + "-" + index + ".jpg");
		return response.build();

	}
	@Secured
	@GET
	@Path("/thumbnail/{examinationID}/{index}")
	@Produces("image/jpg")
	public Response getThumbnailFile(@PathParam("examinationID") String examinationID, @PathParam("index") int index) throws IOException {
		ExaminationIDParser eidParser = new ExaminationIDParser();
		String path = eidParser.getMoreFromExamination(examinationID).getImagePaths().get(index);
		ThumbnailBuilder thumbBuilder = new ThumbnailBuilder();
		File file = thumbBuilder.getThumbnail(path, examinationID, index);
		ResponseBuilder response = Response.ok((Object) file);
		response.header("Content-Disposition",
			"attachment; filename=" + examinationID + "-" + index + "-thumb.jpg");
		return response.build();
	}
	@Secured
    @POST
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection")
    public void createCollectiion(@Context SecurityContext securityContext, Collection item) throws Exception{
    	Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "INSERT INTO collection(user_id,name,descr,date)"
	    		+ " VALUES('"+id+"','"+item.getCollectionName()+"','"+item.getCollectionDescr()+"', NOW());";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();	    
	    c.close();
    }
	@Secured
    @POST
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @Path("/collection/{collectionid}")
    public void addItem(@Context SecurityContext securityContext, CollectionItem item, @PathParam("collectionid") int collectionid) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "INSERT INTO collectionitem(examinationID,imageindex,collection_id,user_id)"
	    		+ " VALUES('"+item.getExaminationID()+"',"+item.getIndex()+","+collectionid+","+id+");";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    c.close();
    }
    @Secured
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    @Path("/collection/")
    public List<Collection> getCollections(@Context SecurityContext securityContext) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "SELECT id,name,descr FROM collection WHERE user_id = " + id + ";";
	    Statement stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery(addQuerry);
	    List<Collection> result = new ArrayList<Collection>();
	    while(rs.next()){
	    	Collection col = new Collection();
	    	col.setCollectionID(rs.getInt("id"));
	    	col.setCollectionName(rs.getString("name"));
	    	col.setCollectionDescr(rs.getString("descr"));
	    	col.setuserID(id);
	    	result.add(col);
	    }
	    c.close();
        return result;
    }
    @Secured
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    @Path("/collection/{collectionID}")
    public List<CollectionItem> getCollectionItems(@Context SecurityContext securityContext, @PathParam("collectionID") int collectionID) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "SELECT examinationID,imageindex,note,collection_id,collectionitem_id FROM collectionitem"
	    		+ " WHERE user_ID = " + id + " AND  collection_id = " + collectionID + ";";
	    Statement stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery(addQuerry);
	    List<CollectionItem> result = new ArrayList<CollectionItem>();
	    while(rs.next()){
	    	CollectionItem col = new CollectionItem();
	    	col.setExaminationID(rs.getString("examinationID"));
	    	col.setIndex(rs.getInt("imageindex"));
	    	col.setNote(rs.getString("note"));
	    	col.setCollectionID(rs.getInt("collection_id"));
	    	col.setCollectionitemID(rs.getInt("collectionitem_id"));
	    	result.add(col);
	    }
	    c.close();
        return result;
    }
    @Secured
    @PUT
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection/note")
    public void addNote(@Context SecurityContext securityContext, CollectionItem col) throws SQLException{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "UPDATE collectionitem SET note ='"+col.getNote()+"'"
	    		+ " WHERE user_id = " + id + " AND collection_id = " + col.getCollectionID() + " AND collectionitem_id = "+ col.getCollectionitemID() +";";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    c.close();
    }
    @Secured
    @PUT
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection/description")
    public void addDescription(@Context SecurityContext securityContext, Collection col) throws SQLException{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "UPDATE collection SET descr ='"+col.getCollectionDescr()+"'"
	    		+ " WHERE user_id = " + id + " AND id = " + col.getCollectionID() + ";";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    c.close();
    }
    @Secured
    @DELETE
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection/")
    public void deleteCollection(@Context SecurityContext securityContext, Collection col) throws SQLException{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "DELETE FROM collection WHERE user_id=" + id + " AND id=" + col.getCollectionID() + ";";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    addQuerry = "DELETE FROM collectionitem WHERE user_id=" + id + " AND collection_id=" + col.getCollectionID() + ";";
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    c.close();
    }
    @Secured
    @DELETE
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection/{collectionID}")
    public void deleteImageInCollection(@Context SecurityContext securityContext, CollectionItem col, @PathParam("collectionID") int collectionID) throws SQLException{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "DELETE FROM collectionitem"
	    		+ " WHERE user_id=" + id + " AND collectionitem_id=" + col.getCollectionitemID() + " AND collection_id=" + collectionID +";";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();
	    c.close();
    }
    @Secured
    @POST
    @Consumes({MediaType.APPLICATION_JSON})
    @Path("/collection/share/{targetUserID}")
    public void shareCollectiion(@Context SecurityContext securityContext, Collection item, @PathParam("targetUserID") int targetUserID) throws Exception{
    	Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "INSERT INTO bookmark(user_id,collection_id) SELECT "+targetUserID+","+ item.getCollectionID() 
	    		+ " WHERE EXISTS (SELECT 1 FROM collection WHERE collection.id=" + item.getCollectionID() +" AND collection.user_id="+ id +");";
	    PreparedStatement preparedStatement = null;
	    preparedStatement = c.prepareStatement(addQuerry);
	    preparedStatement.executeUpdate();	    
	    c.close();
    }
    @Secured
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    @Path("/collection/share")
    public List<Collection> getSharedCollections(@Context SecurityContext securityContext) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "SELECT id,name,descr,user_id FROM collection"
	    		+ " WHERE EXISTS (SELECT 1 FROM bookmark WHERE bookmark.user_id="+ id +" AND bookmark.collection_id=collection.id);";
	    Statement stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery(addQuerry);
	    List<Collection> result = new ArrayList<Collection>();
	    while(rs.next()){
	    	Collection col = new Collection();
	    	col.setCollectionID(rs.getInt("id"));
	    	col.setCollectionName(rs.getString("name"));
	    	col.setCollectionDescr(rs.getString("descr"));
	    	col.setuserID(rs.getInt("user_id"));
	    	result.add(col);
	    }
	    c.close();
	    rs.close();
        return result;
    }
    @Secured
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    @Path("/collection/share/{collectionID}")
    public List<CollectionItem> getSharedCollectionItems(@Context SecurityContext securityContext,@PathParam("collectionID") int collectionID) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "SELECT examinationID,imageindex,note,collection_id,collectionitem_id FROM collectionitem"
	    		+ " WHERE EXISTS (SELECT 1 FROM bookmark WHERE bookmark.user_id= " + id + " AND bookmark.collection_id=" + collectionID + ")"
	    		+ " AND collection_id="+ collectionID +";";
	    Statement stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery(addQuerry);
	    List<CollectionItem> result = new ArrayList<CollectionItem>();
	    while(rs.next()){
	    	CollectionItem col = new CollectionItem();
	    	col.setExaminationID(rs.getString("examinationID"));
	    	col.setIndex(rs.getInt("imageindex"));
	    	col.setNote(rs.getString("note"));
	    	col.setCollectionID(rs.getInt("collection_id"));
	    	col.setCollectionitemID(rs.getInt("collectionitem_id"));
	    	result.add(col);
	    }
	    c.close();
        return result;
    }
    @Secured
    @GET
    @Produces("application/zip")
    @Path("/collection/export/{collectionID}")
    public Response exportCollection(@Context SecurityContext securityContext,@PathParam("collectionID") int collectionID) throws Exception{
	    Connection c = new DatabaseConnection().getConnection();
	    int id = Integer.parseInt(securityContext.getUserPrincipal().getName());
	    String addQuerry = "SELECT examinationID FROM collectionitem"
	    		+ " WHERE EXISTS (SELECT 1 FROM bookmark WHERE bookmark.user_id= " + id + " AND bookmark.collection_id=" + collectionID + " OR collectionitem.user_id = " + id + ")"
	    		+ " AND collection_id="+ collectionID +";";
	    Statement stmt = c.createStatement();
	    ResultSet rs = stmt.executeQuery(addQuerry);
	    List<ExaminationIdentifier> result = new ArrayList<ExaminationIdentifier>();
	    while(rs.next()){
	    	ExaminationIDParser eIDp = new ExaminationIDParser();
	    	ExaminationIdentifier eid = eIDp.getExaminationIdentifier(rs.getString("examinationID"));
	    	result.add(eid);
	    }
	    ExaminationIdentifier[] eidArr = result.toArray(new ExaminationIdentifier[result.size()]);
	    MVDHandler handler = new MVDHandler();
	    handler.setExaminationDataLocation("TestData.mvd");
		DefaultProgressNotifiable pn = new DefaultProgressNotifiable();
		handler.exportToMVD(eidArr, "TargetMVD.mvd",pn,(ExaminationContentFilter)null, true);
	    c.close();
	    ZipUtil.pack(new File("TargetMVD.mvd"), new File("exportedCollection.zip"));
	    Response.ok(new File("test.zip"))
	            .header("Content-Disposition",
	                    "attachment; filename=test.zip").build();
    }
    
	@GET
	@Path("/initValues")
    @Produces(MediaType.APPLICATION_JSON)
	public InitValues getTreatTypesJSON() throws IOException, NoSuchExaminationException{
		ServerInitializer init = new ServerInitializer();
		return init.initialize();
	}
}