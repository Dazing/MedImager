package com.MedImager.ExaminationServer;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import medview.datahandling.MedViewDataHandler;
import medview.datahandling.NoSuchTermException;
import medview.datahandling.PatientIdentifier;
import medview.datahandling.examination.ExaminationIdentifier;
import medview.datahandling.examination.ExaminationValueContainer;
import medview.datahandling.examination.MVDHandler;
import medview.datahandling.examination.NoSuchExaminationException;

public class ServerInitializer {
	MedViewDataHandler handler;
	InitValues initValues;
	ExaminationIdentifier [] test;;
	public ServerInitializer(){
		handler = MedViewDataHandler.instance();
        handler.setExaminationDataLocation("TestData.mvd");
		initValues = new InitValues();
	}
	public InitValues initialize() throws IOException, NoSuchExaminationException{
		initValues.setAllergy(getValues("Allergy"));
		initValues.setBiopsySite(getValues("Biopsy-site"));
		initValues.setDiagDef(getValues("Diag-def"));
		initValues.setDiagHist(getValues("Diag-hist"));
		initValues.setDiagTent(getValues("Diag-tent"));
		initValues.setDisNow(getValues("Dis-now"));
		initValues.setDisPast(getValues("Dis-past"));
		initValues.setDrug(getValues("Drug"));
		initValues.setFactorNeg(getValues("Factor-neg"));
		initValues.setFactorPos(getValues("Factor-pos"));
		initValues.setFamily(getValues("Family"));
		initValues.setGender(getValues("Gender"));
		initValues.setLesnOn(getValues("Lesn-on"));
		initValues.setLesnSite(getValues("Lesn-site"));
		initValues.setSkinPbl(getValues("Skin-pbl"));
		initValues.setSmoke(getValues("Smoke"));
		initValues.setSnuff(getValues("Snuff"));
		initValues.setSymptNow(getValues("Sympt-now"));
		initValues.setSymptSite(getValues("Sympt-site"));
		initValues.setTreatType(getValues("Treat-type"));
		initValues.setVasNow(getValues("Vas-now"));
		return initValues;
	}
	private List<String> getValues(String valueType) throws IOException, NoSuchExaminationException{
		List<String> results = new ArrayList<String>();
		MVDHandler mvdh = new MVDHandler();
		mvdh.setExaminationDataLocation("TestData.mvd");
		for(PatientIdentifier pid : handler.getPatients()){
			new File("TargetMVD.mvd").mkdir();
			for(ExaminationIdentifier eid : handler.getExaminations(pid)){
            	ExaminationValueContainer container;
					container = handler.getExaminationValueContainer(eid);
	                    try {
							for (String s : container.getValues(valueType)) {
								if(!results.contains(s)){
									results.add(s);
								}
							}
						} catch (NoSuchTermException e) {
						}
	                }
				test = handler.getExaminations(pid);
				}
			mvdh.exportToMVD(test, "TargetMVD.mvd",null,null, true);
			return results;
	}
	private void setSearchableValues(){
        Map<String, Integer> result = new HashMap<>();
        try {
            for (PatientIdentifier pid : handler.getPatients()) {
                for (ExaminationIdentifier eid : handler.getExaminations(pid)) {
                    ExaminationValueContainer container = handler.getExaminationValueContainer(eid);
                    for(String term : container.getTermsWithValues()){
                    	if(Arrays.asList(Constants.relevantTerms).contains(term)){
	                        try{
	                            for(String value : container.getValues(term)){
	                                if(result.containsKey(value)){
	                                    result.put(value, result.get(value) + 1);
	                                } else{
	                                    result.put(value, 1);
	                                }
	                            }
	                        } catch(NoSuchTermException e){
	                        }
                    	}
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (NoSuchExaminationException e) {
            e.printStackTrace();
        }
        
        initValues.setSearchableValues(result);
    }
}
